{"version":3,"sources":["components/Header/index.js","components/List/index.js","App.js","serviceWorker.js","index.js"],"names":["Jumbotron","className","id","List","props","name","occupation","hometown","skills","App","state","employees","employeesToDisplay","searchTerm","handleChange","event","target","value","setState","handleSubmit","preventDefault","console","log","filter","employee","includes","sorter","category","sort","a","b","textA","textB","onSubmit","this","type","onChange","placeholder","onClick","map","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"8sCAkBeA,G,MAdG,WAChB,OACE,yBAAKC,UAAU,4BAA4BC,GAAG,UAC5C,yBAAKD,UAAU,aACb,wBAAIA,UAAU,aAAd,sBACA,uBAAGA,UAAU,QAAb,2FCKOE,EAZF,SAACC,GACZ,OACI,4BACE,4BAAKA,EAAMC,MACX,4BAAKD,EAAME,YACX,4BAAKF,EAAMG,UACX,4BAAKH,EAAMI,QACX,4BAAKJ,EAAMF,M,OCoGJO,G,kNArGbC,MAAQ,CACNC,YACAC,mBAAoB,GACpBC,WAAY,I,EAIdC,aAAe,SAACC,GAAW,IAAD,EACAA,EAAMC,OAAtBX,EADgB,EAChBA,KAAMY,EADU,EACVA,MACd,EAAKC,SAAL,eACGb,EAAOY,K,EAKZE,aAAe,SAACJ,GACdA,EAAMK,iBACNC,QAAQC,IAAI,gBACZD,QAAQC,IAAI,EAAKZ,MAAMG,YACvB,IAAMF,EAAY,EAAKD,MAAMC,UAAUY,QAAO,SAACC,GAC3C,OAAOA,EAASnB,KAAKoB,SAAS,EAAKf,MAAMG,eAE7C,EAAKK,SAAS,CACZP,e,EAIJe,OAAS,SAACC,GACR,IAAMhB,EAAY,EAAKD,MAAMC,UAAUiB,MAAK,SAAUC,EAAGC,GACvD,IAAIC,EAAQF,EAAEF,GACVK,EAAQF,EAAEH,GACd,OAAOI,EAAQC,GAAS,EAAID,EAAQC,EAAQ,EAAI,KAGlD,EAAKd,SAAS,CAAEP,e,uDAIR,IAAD,OACT,OACE,oCACA,kBAAC,EAAD,MACA,yBAAKV,UAAU,aACb,yBAAKA,UAAU,+BACb,0BAAMgC,SAAUC,KAAKf,cACnB,yBAAKlB,UAAU,8BACb,2BACEkC,KAAK,OACL9B,KAAK,aACLY,MAAOiB,KAAKxB,MAAMG,WAClBuB,SAAUF,KAAKpB,aACfb,UAAU,eACVoC,YAAY,WAEd,yBAAKpC,UAAU,sBACb,4BACEA,UAAU,yBACVkC,KAAK,SACLjC,GAAG,kBAHL,eAYV,2BAAOD,UAAU,uBACf,4BACE,wBAAIqC,QAAS,kBAAM,EAAKZ,OAAO,SAASzB,UAAU,aAChD,4BAAQA,UAAU,iCAAlB,SAEF,wBAAIqC,QAAS,kBAAM,EAAKZ,OAAO,eAAezB,UAAU,aACtD,4BAAQA,UAAU,iCAAlB,eAEF,wBAAIqC,QAAS,kBAAM,EAAKZ,OAAO,aAAazB,UAAU,aACpD,4BAAQA,UAAU,iCAAlB,aAEF,wBAAIqC,QAAS,kBAAM,EAAKZ,OAAO,WAAWzB,UAAU,aAClD,4BAAQA,UAAU,iCAAlB,WAEF,wBAAIqC,QAAS,kBAAM,EAAKZ,OAAO,OAAOzB,UAAU,aAC9C,4BAAQA,UAAU,iCAAlB,QAIHiC,KAAKxB,MAAMC,UAAU4B,KAAI,SAACf,GAAD,OACxB,kBAAC,EAAD,CACEgB,IAAKhB,EAAStB,GACdA,GAAIsB,EAAStB,GACbG,KAAMmB,EAASnB,KACfC,WAAYkB,EAASlB,WACrBC,SAAUiB,EAASjB,SACnBC,OAAQgB,EAAShB,kB,GA/FTiC,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtC,QAAQsC,MAAMA,EAAMC,c","file":"static/js/main.e07cb126.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\n\nconst Jumbotron = () => {\n  return (\n    <div className=\"jumbotron jumbotron-fluid\" id=\"header\">\n      <div className=\"container\">\n        <h1 className=\"display-4\">Employee Directory</h1>\n        <p className=\"lead\">\n          Directory listing all employees.  Search for a specific person or sort by category.\n        </p>\n      </div>\n    </div>\n\n  );\n};\n\nexport default Jumbotron;\n","import React from \"react\";\r\n\r\nconst List = (props) => {\r\n  return (\r\n      <tr>\r\n        <td>{props.name}</td>\r\n        <td>{props.occupation}</td>\r\n        <td>{props.hometown}</td>\r\n        <td>{props.skills}</td>\r\n        <td>{props.id}</td>\r\n      </tr>\r\n  );\r\n};\r\n\r\nexport default List;\r\n","import React, { Component } from \"react\";\nimport Jumbotron from \"./components/Header\";\nimport List from \"./components/List/index\";\nimport employees from \"./employees.json\";\nimport \"./App.css\";\n\nclass App extends Component {\n\n  state = {\n    employees,\n    employeesToDisplay: [],\n    searchTerm: \"\",\n  };\n\n  // Reach searchTerm input\n  handleChange = (event) => {\n    const { name, value } = event.target;\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  // Filter employee names through searchTerm\n  handleSubmit = (event) => {\n    event.preventDefault();\n    console.log(\"HandleSubmit\");\n    console.log(this.state.searchTerm);\n    const employees = this.state.employees.filter((employee) => {\n        return employee.name.includes(this.state.searchTerm);\n    });\n    this.setState({\n      employees\n    });\n  };\n    // Sort columns\n  sorter = (category) => {\n    const employees = this.state.employees.sort(function (a, b) {\n      var textA = a[category];\n      var textB = b[category];\n      return textA < textB ? -1 : textA > textB ? 1 : 0;\n    });\n\n    this.setState({ employees });\n  };\n\n\n  render() {\n  return (\n    <>\n    <Jumbotron />\n    <div className=\"container\">\n      <div className=\"row row justify-content-end\">\n        <form onSubmit={this.handleSubmit}>\n          <div className=\"input-group mb-3 searchBar\">\n            <input\n              type=\"text\"\n              name=\"searchTerm\"\n              value={this.state.searchTerm}\n              onChange={this.handleChange}\n              className=\"form-control\"\n              placeholder=\"Search\"\n            />\n            <div className=\"input-group-append\">\n              <button\n                className=\"btn btn-info searchBtn\"\n                type=\"submit\"\n                id=\"button-addon2 \"\n              >\n                Search\n              </button>\n            </div>\n          </div>\n        </form>\n      </div>\n    </div>\n    <table className=\"table employeeTable\">\n      <tr>\n        <th onClick={() => this.sorter(\"name\")} className=\"tableHead\">\n          <button className=\"tableButton btn btn-secondary\">Name</button>\n        </th>\n        <th onClick={() => this.sorter(\"occupation\")} className=\"tableHead\">\n          <button className=\"tableButton btn btn-secondary\">Occupation</button>\n        </th>\n        <th onClick={() => this.sorter(\"hometown\")} className=\"tableHead\">\n          <button className=\"tableButton btn btn-secondary\">Hometown</button>\n        </th>\n        <th onClick={() => this.sorter(\"skills\")} className=\"tableHead\">\n          <button className=\"tableButton btn btn-secondary\">Skills</button>\n        </th>\n        <th onClick={() => this.sorter(\"id\")} className=\"tableHead\">\n          <button className=\"tableButton btn btn-secondary\">Id</button>\n        </th>\n\n      </tr>\n      {this.state.employees.map((employee) => (\n        <List\n          key={employee.id}\n          id={employee.id}\n          name={employee.name}\n          occupation={employee.occupation}\n          hometown={employee.hometown}\n          skills={employee.skills}          \n        />\n      ))}\n    </table>\n  </>  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}